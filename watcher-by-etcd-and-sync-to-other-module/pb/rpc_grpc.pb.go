// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.8
// source: watcher-by-etcd-and-sync-to-other-module/pb/rpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Watcher_Get_FullMethodName   = "/pb.Watcher/Get"
	Watcher_Watch_FullMethodName = "/pb.Watcher/Watch"
)

// WatcherClient is the client API for Watcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatcherClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Watcher_GetClient, error)
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Watcher_WatchClient, error)
}

type watcherClient struct {
	cc grpc.ClientConnInterface
}

func NewWatcherClient(cc grpc.ClientConnInterface) WatcherClient {
	return &watcherClient{cc}
}

func (c *watcherClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Watcher_GetClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Watcher_ServiceDesc.Streams[0], Watcher_Get_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &watcherGetClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Watcher_GetClient interface {
	Recv() (*WatchEventProto, error)
	grpc.ClientStream
}

type watcherGetClient struct {
	grpc.ClientStream
}

func (x *watcherGetClient) Recv() (*WatchEventProto, error) {
	m := new(WatchEventProto)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *watcherClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Watcher_WatchClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Watcher_ServiceDesc.Streams[1], Watcher_Watch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &watcherWatchClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Watcher_WatchClient interface {
	Recv() (*WatchEventProto, error)
	grpc.ClientStream
}

type watcherWatchClient struct {
	grpc.ClientStream
}

func (x *watcherWatchClient) Recv() (*WatchEventProto, error) {
	m := new(WatchEventProto)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WatcherServer is the server API for Watcher service.
// All implementations must embed UnimplementedWatcherServer
// for forward compatibility
type WatcherServer interface {
	Get(*GetRequest, Watcher_GetServer) error
	Watch(*WatchRequest, Watcher_WatchServer) error
	mustEmbedUnimplementedWatcherServer()
}

// UnimplementedWatcherServer must be embedded to have forward compatible implementations.
type UnimplementedWatcherServer struct {
}

func (UnimplementedWatcherServer) Get(*GetRequest, Watcher_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWatcherServer) Watch(*WatchRequest, Watcher_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedWatcherServer) mustEmbedUnimplementedWatcherServer() {}

// UnsafeWatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatcherServer will
// result in compilation errors.
type UnsafeWatcherServer interface {
	mustEmbedUnimplementedWatcherServer()
}

func RegisterWatcherServer(s grpc.ServiceRegistrar, srv WatcherServer) {
	s.RegisterService(&Watcher_ServiceDesc, srv)
}

func _Watcher_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WatcherServer).Get(m, &watcherGetServer{ServerStream: stream})
}

type Watcher_GetServer interface {
	Send(*WatchEventProto) error
	grpc.ServerStream
}

type watcherGetServer struct {
	grpc.ServerStream
}

func (x *watcherGetServer) Send(m *WatchEventProto) error {
	return x.ServerStream.SendMsg(m)
}

func _Watcher_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WatcherServer).Watch(m, &watcherWatchServer{ServerStream: stream})
}

type Watcher_WatchServer interface {
	Send(*WatchEventProto) error
	grpc.ServerStream
}

type watcherWatchServer struct {
	grpc.ServerStream
}

func (x *watcherWatchServer) Send(m *WatchEventProto) error {
	return x.ServerStream.SendMsg(m)
}

// Watcher_ServiceDesc is the grpc.ServiceDesc for Watcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Watcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Watcher",
	HandlerType: (*WatcherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Watcher_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _Watcher_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "watcher-by-etcd-and-sync-to-other-module/pb/rpc.proto",
}
