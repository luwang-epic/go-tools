// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.21.8
// source: scheduler-by-etcd-and-kafka/pb/alarm.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AlarmPolicyProto_AlarmPolicyState int32

const (
	AlarmPolicyProto_AS_ENABLED  AlarmPolicyProto_AlarmPolicyState = 0 // 已启用
	AlarmPolicyProto_AS_DISABLED AlarmPolicyProto_AlarmPolicyState = 1 // 已关闭
)

// Enum value maps for AlarmPolicyProto_AlarmPolicyState.
var (
	AlarmPolicyProto_AlarmPolicyState_name = map[int32]string{
		0: "AS_ENABLED",
		1: "AS_DISABLED",
	}
	AlarmPolicyProto_AlarmPolicyState_value = map[string]int32{
		"AS_ENABLED":  0,
		"AS_DISABLED": 1,
	}
)

func (x AlarmPolicyProto_AlarmPolicyState) Enum() *AlarmPolicyProto_AlarmPolicyState {
	p := new(AlarmPolicyProto_AlarmPolicyState)
	*p = x
	return p
}

func (x AlarmPolicyProto_AlarmPolicyState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlarmPolicyProto_AlarmPolicyState) Descriptor() protoreflect.EnumDescriptor {
	return file_scheduler_by_etcd_and_kafka_pb_alarm_proto_enumTypes[0].Descriptor()
}

func (AlarmPolicyProto_AlarmPolicyState) Type() protoreflect.EnumType {
	return &file_scheduler_by_etcd_and_kafka_pb_alarm_proto_enumTypes[0]
}

func (x AlarmPolicyProto_AlarmPolicyState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlarmPolicyProto_AlarmPolicyState.Descriptor instead.
func (AlarmPolicyProto_AlarmPolicyState) EnumDescriptor() ([]byte, []int) {
	return file_scheduler_by_etcd_and_kafka_pb_alarm_proto_rawDescGZIP(), []int{0, 0}
}

type AlarmPolicyProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	// 策略id
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// 策略名称
	Name  string                            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	State AlarmPolicyProto_AlarmPolicyState `protobuf:"varint,4,opt,name=state,proto3,enum=bls.AlarmPolicyProto_AlarmPolicyState" json:"state,omitempty"`
	// 报警策略创建时间戳，单位：毫秒
	CreatedTimestamp int64 `protobuf:"varint,5,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	// 报警策略更新时间戳，单位：毫秒
	UpdatedTimestamp int64 `protobuf:"varint,6,opt,name=updated_timestamp,json=updatedTimestamp,proto3" json:"updated_timestamp,omitempty"`
	// 执行周期
	Schedule *AlarmScheduleProto `protobuf:"bytes,7,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// 下一次执行时间，单位：毫秒
	NextScheduleTimestamp int64 `protobuf:"varint,8,opt,name=next_schedule_timestamp,json=nextScheduleTimestamp,proto3" json:"next_schedule_timestamp,omitempty"`
}

func (x *AlarmPolicyProto) Reset() {
	*x = AlarmPolicyProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_by_etcd_and_kafka_pb_alarm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmPolicyProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmPolicyProto) ProtoMessage() {}

func (x *AlarmPolicyProto) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_by_etcd_and_kafka_pb_alarm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmPolicyProto.ProtoReflect.Descriptor instead.
func (*AlarmPolicyProto) Descriptor() ([]byte, []int) {
	return file_scheduler_by_etcd_and_kafka_pb_alarm_proto_rawDescGZIP(), []int{0}
}

func (x *AlarmPolicyProto) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

func (x *AlarmPolicyProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AlarmPolicyProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AlarmPolicyProto) GetState() AlarmPolicyProto_AlarmPolicyState {
	if x != nil {
		return x.State
	}
	return AlarmPolicyProto_AS_ENABLED
}

func (x *AlarmPolicyProto) GetCreatedTimestamp() int64 {
	if x != nil {
		return x.CreatedTimestamp
	}
	return 0
}

func (x *AlarmPolicyProto) GetUpdatedTimestamp() int64 {
	if x != nil {
		return x.UpdatedTimestamp
	}
	return 0
}

func (x *AlarmPolicyProto) GetSchedule() *AlarmScheduleProto {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *AlarmPolicyProto) GetNextScheduleTimestamp() int64 {
	if x != nil {
		return x.NextScheduleTimestamp
	}
	return 0
}

type AlarmScheduleProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 间隔时长，单位：分钟
	IntervalMinute int64 `protobuf:"varint,1,opt,name=interval_minute,json=intervalMinute,proto3" json:"interval_minute,omitempty"`
	// 指定时刻，一天中的第几分钟，取值范围[0, 1440)
	FixTimeMinute int32 `protobuf:"varint,2,opt,name=fix_time_minute,json=fixTimeMinute,proto3" json:"fix_time_minute,omitempty"`
	// 固定时间频率; 0: 每天  1~7 一周的某天
	DayOfWeek int32 `protobuf:"varint,3,opt,name=day_of_week,json=dayOfWeek,proto3" json:"day_of_week,omitempty"`
}

func (x *AlarmScheduleProto) Reset() {
	*x = AlarmScheduleProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_by_etcd_and_kafka_pb_alarm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmScheduleProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmScheduleProto) ProtoMessage() {}

func (x *AlarmScheduleProto) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_by_etcd_and_kafka_pb_alarm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmScheduleProto.ProtoReflect.Descriptor instead.
func (*AlarmScheduleProto) Descriptor() ([]byte, []int) {
	return file_scheduler_by_etcd_and_kafka_pb_alarm_proto_rawDescGZIP(), []int{1}
}

func (x *AlarmScheduleProto) GetIntervalMinute() int64 {
	if x != nil {
		return x.IntervalMinute
	}
	return 0
}

func (x *AlarmScheduleProto) GetFixTimeMinute() int32 {
	if x != nil {
		return x.FixTimeMinute
	}
	return 0
}

func (x *AlarmScheduleProto) GetDayOfWeek() int32 {
	if x != nil {
		return x.DayOfWeek
	}
	return 0
}

type AlarmTaskProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 报警策略
	Policy *AlarmPolicyProto `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	// 调度时间
	ScheduleTimestamp int64 `protobuf:"varint,2,opt,name=schedule_timestamp,json=scheduleTimestamp,proto3" json:"schedule_timestamp,omitempty"`
}

func (x *AlarmTaskProto) Reset() {
	*x = AlarmTaskProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_by_etcd_and_kafka_pb_alarm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmTaskProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmTaskProto) ProtoMessage() {}

func (x *AlarmTaskProto) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_by_etcd_and_kafka_pb_alarm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmTaskProto.ProtoReflect.Descriptor instead.
func (*AlarmTaskProto) Descriptor() ([]byte, []int) {
	return file_scheduler_by_etcd_and_kafka_pb_alarm_proto_rawDescGZIP(), []int{2}
}

func (x *AlarmTaskProto) GetPolicy() *AlarmPolicyProto {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *AlarmTaskProto) GetScheduleTimestamp() int64 {
	if x != nil {
		return x.ScheduleTimestamp
	}
	return 0
}

var File_scheduler_by_etcd_and_kafka_pb_alarm_proto protoreflect.FileDescriptor

var file_scheduler_by_etcd_and_kafka_pb_alarm_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x62, 0x79, 0x2d, 0x65,
	0x74, 0x63, 0x64, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2f, 0x70, 0x62,
	0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x62, 0x6c,
	0x73, 0x22, 0x88, 0x03, 0x0a, 0x10, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x62, 0x6c, 0x73, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a,
	0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x6c, 0x73, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x36, 0x0a, 0x17, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x33, 0x0a, 0x10, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x22, 0x85, 0x01, 0x0a,
	0x12, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x66, 0x69, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77,
	0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66,
	0x57, 0x65, 0x65, 0x6b, 0x22, 0x6e, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6c, 0x73, 0x2e, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x20, 0x5a, 0x1e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2d, 0x62, 0x79, 0x2d, 0x65, 0x74, 0x63, 0x64, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scheduler_by_etcd_and_kafka_pb_alarm_proto_rawDescOnce sync.Once
	file_scheduler_by_etcd_and_kafka_pb_alarm_proto_rawDescData = file_scheduler_by_etcd_and_kafka_pb_alarm_proto_rawDesc
)

func file_scheduler_by_etcd_and_kafka_pb_alarm_proto_rawDescGZIP() []byte {
	file_scheduler_by_etcd_and_kafka_pb_alarm_proto_rawDescOnce.Do(func() {
		file_scheduler_by_etcd_and_kafka_pb_alarm_proto_rawDescData = protoimpl.X.CompressGZIP(file_scheduler_by_etcd_and_kafka_pb_alarm_proto_rawDescData)
	})
	return file_scheduler_by_etcd_and_kafka_pb_alarm_proto_rawDescData
}

var file_scheduler_by_etcd_and_kafka_pb_alarm_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_scheduler_by_etcd_and_kafka_pb_alarm_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_scheduler_by_etcd_and_kafka_pb_alarm_proto_goTypes = []interface{}{
	(AlarmPolicyProto_AlarmPolicyState)(0), // 0: bls.AlarmPolicyProto.AlarmPolicyState
	(*AlarmPolicyProto)(nil),               // 1: bls.AlarmPolicyProto
	(*AlarmScheduleProto)(nil),             // 2: bls.AlarmScheduleProto
	(*AlarmTaskProto)(nil),                 // 3: bls.AlarmTaskProto
}
var file_scheduler_by_etcd_and_kafka_pb_alarm_proto_depIdxs = []int32{
	0, // 0: bls.AlarmPolicyProto.state:type_name -> bls.AlarmPolicyProto.AlarmPolicyState
	2, // 1: bls.AlarmPolicyProto.schedule:type_name -> bls.AlarmScheduleProto
	1, // 2: bls.AlarmTaskProto.policy:type_name -> bls.AlarmPolicyProto
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_scheduler_by_etcd_and_kafka_pb_alarm_proto_init() }
func file_scheduler_by_etcd_and_kafka_pb_alarm_proto_init() {
	if File_scheduler_by_etcd_and_kafka_pb_alarm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scheduler_by_etcd_and_kafka_pb_alarm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlarmPolicyProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_by_etcd_and_kafka_pb_alarm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlarmScheduleProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_by_etcd_and_kafka_pb_alarm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlarmTaskProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scheduler_by_etcd_and_kafka_pb_alarm_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scheduler_by_etcd_and_kafka_pb_alarm_proto_goTypes,
		DependencyIndexes: file_scheduler_by_etcd_and_kafka_pb_alarm_proto_depIdxs,
		EnumInfos:         file_scheduler_by_etcd_and_kafka_pb_alarm_proto_enumTypes,
		MessageInfos:      file_scheduler_by_etcd_and_kafka_pb_alarm_proto_msgTypes,
	}.Build()
	File_scheduler_by_etcd_and_kafka_pb_alarm_proto = out.File
	file_scheduler_by_etcd_and_kafka_pb_alarm_proto_rawDesc = nil
	file_scheduler_by_etcd_and_kafka_pb_alarm_proto_goTypes = nil
	file_scheduler_by_etcd_and_kafka_pb_alarm_proto_depIdxs = nil
}
